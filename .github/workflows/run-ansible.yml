name: Run Ansible
# Runs an ansible dry run and posts the results as a comment on the PR.
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name.pull_request && github.event.pull_request.number || github.sha }}
  # only cancel-in-progress on non-default branches
  cancel-in-progress: ${{ github.ref_name != github.event.repository.default_branch }}
env:
  COMMENT_ID: ansible-dry-run
jobs:
  run:
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:


      - uses: mshick/add-pr-comment@v2
        with:
          refresh-message-position: false
          update-only: true
          message-id: ${{ env.COMMENT_ID }}
          message: |
            ## Ansible Dry Run Results

            :hourglass_flowing_sand: Running Ansible Dry Run...
      - uses: actions/checkout@v4

      # connect to vpn - needed to access private network
      - name: Install OpenVPN
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved
      - name: Set host and port in config
        run: |
          sed -i "s/remote vpn.example.com 1194/remote ${{ secrets.VPN_ENDPOINT_HOST }} ${{ secrets.VPN_ENDPOINT_PORT }}/g" .github/config/client.ovpn
          echo "::add-mask::$(dig ${{ secrets.VPN_ENDPOINT_HOST }} +short)"
      - name: Connect to VPN
        uses: "kota65535/github-openvpn-connect-action@v2"
        with:
          config_file: .github/config/client.ovpn
          client_key: ${{ secrets.OVPN_CLIENT_PRIVATE_KEY }}

      # set up ssh
      - name: Set up SSH
        run: |
          # start the ssh agent and drop in keys and known_hosts
          eval $(ssh-agent -s)
          mkdir -p ~/.ssh
          echo "${{ secrets.ANSIBLE_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-add ~/.ssh/id_rsa
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
          echo "::add-mask::${{ secrets.ANSIBLE_SSH_KEY }}"

      # install and run ansible
      - name: Install Ansible
        run: |
          # print every command before running
          set -x

          sudo apt update
          sudo apt install -y ansible=2.10.7+merged+base+2.10.8+dfsg-1

          ansible --version
      # - name: Install Ansible Galaxy Requirements
      #   run: |
      #     ansible-galaxy install -r requirements.yml
      - name: ansible ping every inventory
        id: ansible-ping
        if: (!cancelled())
        run: |
          # print every command before running
          set -x

          # set pipefail so that the pipeline will fail if any command fails so we're sure tee doesn't swallow the error
          set -o pipefail

          find ./inventory -type f -name "*.cfg" -print | while read -r inventory; do
            echo "Pinging all group for inventory $inventory"
            ansible -m ping --inventory $inventory all 2>&1 | tee output.txt
          done
      - name: Run Ansible
        id: ansible
        if: (!cancelled())
        run: |

          # print every command before running
          set -x

          # set pipefail so that the pipeline will fail if any command fails so we're sure tee doesn't swallow the error
          set -o pipefail

          find ./inventory/ -type f -name "*.cfg" -print | while read -r inventory; do
            inventory="$(basename -s .cfg "$inventory")"
            IS_DEFAULT_BRANCH="${{ github.ref_name == github.event.repository.default_branch}}"
            CHECK="--check"
            if [[ "$IS_DEFAULT_BRANCH" == "true" ]]; then
              CHECK=""
            fi
            ansible-playbook "./playbooks/$inventory.yml" --inventory "./inventory/$inventory.cfg" "$CHECK" 2>&1 | tee output.txt
          done

          # if output exists
          if [[ -s output.txt ]]; then
            echo "ansible-dry-run="$(cat output.txt) >> $GITHUB_OUTPUT
          fi

      - uses: mshick/add-pr-comment@v2
        if: (!cancelled())
        with:
          refresh-message-position: true
          message-id: ${{ env.COMMENT_ID }}
          message: |
            ## Ansible Dry Run Results

            <pre>
            ${{ steps.ansible.outputs.ansible-dry-run }}
            </pre>
